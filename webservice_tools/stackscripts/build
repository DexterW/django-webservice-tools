#!/bin/bash
#<UDF name="user_name" label="User account name" default="joel"/>
# <UDF name="user_password" label="User password" default="defaultpass12" />
# <UDF name="server_name" label="Server name" default="lnserver"/>
# <UDF name="hostname" label="Hostname" default="lnserver.com"/>
# <UDF name="github_login" label="Github login" default="joelsemar"/>
# <UDF name="github_password" label="Github password" />
# <UDF name="repo_name" label="Repo name" default="LadiesNight"/>
# <UDF name="django_ver" label="Current Django Version" default="1.2.5" />
# <UDF name="migrations" label="Migrations?" oneOf="yes, no">
# <UDF name="server_git_path" label="Where is the server?" example="This is the path to the server in the git repo
#       eg: 'cbserver' in SportsClubFanatics/cbserver or 'BotannicalEdition/wdykbserver' on WhatDoYouKnow/BotannicalEdition/wdykbsever" 
#      default="lnserver">

USER_NAME=appiction
read -s -p "User password:" USER_PASSWORD
echo ""
if [ -z "$SERVER_NAME"]
  then
    read -e -p "Server Name (something like lnserver):" SERVER_NAME
fi    
read -e -p "Github Login:"  GITHUB_LOGIN
read -s -p "Github Password:" GITHUB_PASSWORD
echo ""
read -e -p "Repo name (Would be LadiesNight for the above):" REPO_NAME
#application code
echo "Checking github repo login etc - don't go away"
mkdir /var/git && cd /var/git
git clone https://$GITHUB_LOGIN:$GITHUB_PASSWORD@github.com/appiction/$REPO_NAME.git /var/git/$REPO_NAME

read -e -p "Django version (1.3 as of May 3, 2011):" DJANGO_VER
read -e -p "Server git path (lnserver in 'LadiesNight/lnserver' or 'BotannicalEdition/wdykbserver' in 'WhatDoYouKnow/BotannicalEdition/wdykbserver'):" SERVER_GIT_PATH
read -e -p "Hostname (something like ws.ladiesnightserver.com):" HOSTNAME


source ssinclude-1 #StackScript Bash Library
source ssinclude-125 #lib-postgres
source ssinclude-124 #lib-system
source ssinclude-123 #lib-system-ubuntu
source ssinclude-127 #lib-django


PROJECT_PATH="/var/www/$SERVER_NAME"

#utils, apache, postgres, add user
system_update
goodstuff
system_install_git
apt-get -y install wget less vim
apache_install
apache_tune
system_sshd_permitrootlogin 'No'
system_add_user $USER_NAME $USER_PASSWORD sudo
apt-get -y install python-setuptools python2.6-dev python-simplejson libapache2-mod-wsgi python-pip python-crypto ipython
cd ~
easy_install South
apt-get -y install gcc

#deps
cd /opt
yes | git clone https://$GITHUB_LOGIN:$GITHUB_PASSWORD@github.com/joelsemar/django-webservice-tools.git
cd django-webservice-tools
python setup.py install
cd webservice_tools/misc
tar -xvf Imaging-1.1.7.tar.gz
#tar -xvf geos-3.2.2.tar.bz2
tar -xvf PyXML.tgz

cd Imaging-1.1.7
apt-get -y  install libjpeg62 libjpeg62-dev
python setup.py install 

cd ../PyXML-0.8.4
python setup.py install

#cd ../geos-3.2.2  && ./configure && make && make install

#install piston
cd /opt
git clone https://github.com/mozilla/django-piston
cd django-piston
python setup.py install

#install Django
cd /opt
yes | wget http://www.djangoproject.com/download/$DJANGO_VER/tarball/ -O Django-$DJANGO_VER.tar.gz
tar -xvf Django-$DJANGO_VER.tar.gz
cd Django-$DJANGO_VER
python setup.py install

#symlink to /var/www
cd /var/www
ln -s /var/git/$REPO_NAME/$SERVER_GIT_PATH $PROJECT_PATH

cd ..
chown -R www-data:www-data www/
chown -R www-data:www-data git/


#the database!
#run this before doing anything else, (set default to utf-8)
apt-get -y install python-software-properties
add-apt-repository ppa:pitti/postgresql
add-apt-repository ppa:ubuntugis/ubuntugis-unstable
apt-get update
apt-get install -y postgresql-9.0 postgresql-server-dev-9.0 postgresql-contrib-9.0 proj libgeos-3.2.2 
apt-get install -y libgeos-c1 libgeos-dev  libgdal1-dev build-essential libxml2 libxml2-dev checkinstall
apt-get -y  install python-psycopg2 python-pgsql


cd /opt

wget http://postgis.refractions.net/download/postgis-1.5.2.tar.gz
tar zxvf postgis-1.5.2.tar.gz && cd postgis-1.5.2/
./configure &&  make && sudo checkinstall --pkgname postgis-1.5.2 --pkgversion 1.5.2-src --default

sudo -u postgres pg_dropcluster --stop 9.0 main
sudo -u postgres pg_createcluster --start -e UTF-8 9.0 main

#need the template_postgis
POSTGIS_SQL_PATH=`pg_config --sharedir`/contrib/postgis-1.5
sudo -u postgres createdb -E utf8 -O postgres -U postgres template_postgis
sudo -u postgres createlang -d template_postgis plpgsql # Adding PLPGSQL language support.
sudo -u postgres psql -d postgres -c "UPDATE pg_database SET datistemplate='true' WHERE datname='template_postgis';"
sudo -u postgres psql -d template_postgis -f $POSTGIS_SQL_PATH/hstore.sql
sudo -u postgres psql -d template_postgis -f $POSTGIS_SQL_PATH/postgis.sql
sudo -u postgres psql -d template_postgis -f $POSTGIS_SQL_PATH/spatial_ref_sys.sql

# Enabling users to alter spatial tables.
sudo -u postgres psql -d template_postgis -c "GRANT ALL ON geometry_columns TO PUBLIC;"
sudo -u postgres psql -d template_postgis -c "GRANT ALL ON geography_columns TO PUBLIC;"
sudo -u postgres psql -d template_postgis -c "GRANT ALL ON spatial_ref_sys TO PUBLIC;"


#your new database
echo "CREATE USER  $SERVER_NAME WITH PASSWORD '$SERVER_NAME' --createdb" | sudo -u postgres psql
sudo -u postgres createdb -E utf8 -T template_postgis -O $SERVER_NAME $SERVER_NAME

echo "GRANT ALL PRIVILEGES ON DATABASE $SERVER_NAME to $SERVER_NAME" | sudo -u postgres psql


#set up for 'password' auth instead of ident (you know, so it actually works)
#In the future we could do this better, but eeeh..
cat > "/etc/postgresql/9.0/main/pg_hba.conf" << EOF


# This file is read on server startup and when the postmaster receives
# a SIGHUP signal.  If you edit the file on a running system, you have
# to SIGHUP the postmaster for the changes to take effect.  You can
# use "pg_ctl reload" to do that.

# Put your actual configuration here
# ----------------------------------
#
# If you want to allow non-local connections, you need to add more
# "host" records.  In that case you will also need to make PostgreSQL
# listen on a non-local interface via the listen_addresses
# configuration parameter, or via the -i or -h command line switches.


# DO NOT DISABLE!
# If you change this first entry you will need to make sure that the
# database
# super user can access the database using some other method.
# Noninteractive
# access to all databases is required during automatic maintenance
# (custom daily cronjobs, replication, and similar tasks).
#
# Database administrative login by UNIX sockets
local   all         postgres                                    trust

# TYPE  DATABASE        USER            CIDR-ADDRESS            METHOD

# "local" is for Unix domain socket connections only
local   all             all                                     trust
# IPv4 local connections:
host    all             all             127.0.0.1/32            md5
# IPv6 local connections:
host    all             all             ::1/128                 password
host    $SERVER_NAME        $SERVER_NAME        0.0.0.0/0       md5
EOF

/etc/init.d/postgresql restart

cd $PROJECT_PATH
mkdir -p "$PROJECT_PATH/logs"
./manage.py syncdb --noinput && echo "Syncing app db.."
./manage.py migrate && echo "Migrating if i can.."

#Hook it up
mkdir -p "$PROJECT_PATH/apache"
mkdir -p "$PROJECT_PATH/static"

ln -s /usr/local/lib/python2.6/dist-packages/django/contrib/admin/media $PROJECT_PATH/static/admin-media 

cat > "$PROJECT_PATH/apache/django.wsgi" << EOF
import os, sys
sys.path.insert(0, '/var/www/$SERVER_NAME')
os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'
import django.core.handlers.wsgi
application = django.core.handlers.wsgi.WSGIHandler()    
EOF

sudo chown -R www-data:www-data $PROJECT_PATH/

echo "Created wsgi file"
rm -rf /etc/apache2/sites-available/default
cat > "/etc/apache2/sites-available/$HOSTNAME" << EOF
<VirtualHost *:80>
    ServerName $HOSTNAME
    DocumentRoot $PROJECT_PATH
    LogLevel warn
    WSGIDaemonProcess www-data processes=5 threads=15 maximum-requests=10000
    WSGIProcessGroup www-data
    WSGIScriptAlias / $PROJECT_PATH/apache/django.wsgi
    Alias /static $PROJECT_PATH/static/
</VirtualHost>
EOF
a2ensite "$HOSTNAME"
/etc/init.d/apache2 restart

#set hostname
hostname $SERVER_NAME

cat > "/etc/hosts" << EOF
127.0.0.1 localhost $SERVER_NAME

# The following lines are desirable for IPv6 capable hosts
::1 ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
ff02::3 ip6-allhosts
EOF

cat > "/etc/hostname" << EOF
$SERVER_NAME
EOF

echo "sudo passwd -dl root - Is the command to disable root login"
